{"version":3,"sources":["components/Create.js","components/User.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","mode","thing","value","onCreate","onCancel","onConfirm","onChange","className","action","onSubmit","method","name","placeholder","type","onClick","userInfo","onClear","onEdit","onRemove","id","TodoList","useState","user","setUser","setMode","setThing","target","setTarget","setValue","nextId","useRef","onclear","e","preventDefault","classList","contains","nextSibling","style","textDecoration","onedit","i","length","parseInt","editThing","onremove","filter","current","create","focus","map","v","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4f1527f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Create({mode, thing, value, onCreate, onCancel, onConfirm, onChange}){\r\n  if(mode==='Create'){\r\n    return (\r\n      <form className=\"typeArea__wrapper\" action=\"/\" onSubmit={onCreate} method=\"post\">\r\n        <input className=\"typeArea__create\" name=\"create\" placeholder={thing} onChange={onChange} value={value}></input>\r\n        <button type=\"submit\" className=\"typeArea__addBtn\">ADD</button>\r\n      </form>\r\n    );\r\n  }else if(mode==='Edit'){\r\n    return (\r\n      <form className=\"typeArea__wrapper\" action=\"/\" onSubmit={onConfirm} method=\"post\">\r\n        <input className=\"typeArea__create\" name=\"create\" placeholder={thing} onChange={onChange} value={value}></input>\r\n        <button onClick={onCancel} className=\"typeArea__cancelBtn\"></button>\r\n        <button type=\"submit\" className=\"typeArea__editBtn\">Edit</button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nexport default React.memo(Create);\r\n","import React  from 'react';\r\n\r\n\r\nconst User = ({ userInfo, onClear, onEdit, onRemove}) => {\r\n \r\n  \r\n  return (\r\n    <li>\r\n      <button className=\"list__checkBox\" onClick={onClear}></button>\r\n      <p className=\"list__thing\">{userInfo.thing}</p>\r\n      <button id={userInfo.id} className=\"list__edit\" onClick={onEdit}>EDIT</button>\r\n      <button className=\"list__remove\" onClick={()=>onRemove(userInfo.id)}>DEL</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default React.memo(User);\r\n\r\n","import React, {useState, useRef} from 'react';\r\nimport './TodoList.css';\r\nimport Create from './components/Create';\r\nimport User from './components/User';\r\n\r\nconst TodoList = () => {\r\n   \r\n    const [user, setUser]= useState([\r\n        {id:1, thing:'스터디준비'},\r\n        {id:2, thing:'기술면접 풀이'},\r\n        {id:3, thing:'알고리즘 공부'},\r\n        {id:4, thing:'생활코딩 강의듣기'},\r\n    ]);\r\n\r\n    const [mode, setMode] = useState('Create'); \r\n    const [thing, setThing] = useState('Type what will you do'); \r\n    const [target, setTarget] = useState('');\r\n    const [value, setValue] = useState('');\r\n    const nextId = useRef(5);\r\n\r\n    const onCreate = e =>{\r\n        e.preventDefault();\r\n        setUser([\r\n            ...user,\r\n            {\r\n              id: nextId.current,\r\n              thing: e.target.create.value\r\n            },\r\n          ]);\r\n          nextId.current+=1;\r\n          e.target.create.value=\"\";\r\n          e.target.create.focus();\r\n        setThing(\r\n          'Type what will you do'\r\n        )\r\n    }\r\n\r\n    const onclear = e =>{\r\n        e.preventDefault();\r\n        if(e.target.classList.contains('list__checkBox__checked')){ //체크되어있으면\r\n          e.target.className='list__checkBox'\r\n          e.target.nextSibling.style.textDecoration=\"none\"\r\n        }\r\n        else{//체크 안되어 있으면\r\n          e.target.className='list__checkBox__checked'\r\n          e.target.nextSibling.style.textDecoration=\"line-through\"\r\n        }\r\n    }\r\n\r\n    const onedit = e => {\r\n      e.preventDefault();\r\n      for(let i=0; i<user.length; i++){\r\n        if(user[i].id === parseInt(e.target.id)){\r\n            var editThing = user[i].thing;\r\n              setValue(\r\n                editThing\r\n              );\r\n          break;\r\n        }\r\n      }\r\n      setTarget(e.target.id);\r\n      setMode('Edit');\r\n    }\r\n\r\n    const onremove = id => {\r\n      setUser(user.filter(user => user.id !== id))\r\n    }\r\n\r\n    const oncancel = e => {\r\n      e.preventDefault();\r\n      setValue('');\r\n      setThing(\r\n        'Type what will you do'\r\n      )\r\n      setMode('Create');\r\n    }\r\n\r\n    const onconfirm = e => {\r\n      e.preventDefault();\r\n      for(let i=0; i<user.length; i++){\r\n        if(user[i].id === parseInt(target)){\r\n            user[i].thing = e.target.create.value;\r\n        }\r\n      }\r\n      setValue('');\r\n      setThing(\r\n        'Type what will you do'\r\n      )\r\n      setMode('Create');\r\n    }\r\n\r\n    const onchange = e => {\r\n      setValue(e.target.value);\r\n    }; \r\n    \r\n    return (\r\n        <div className=\"todo__wrapper\">\r\n          <h1 className=\"todo__title\">TO-DO LIST</h1>\r\n          <Create mode={mode} thing={thing} value={value} onCreate={onCreate} onCancel={oncancel} onConfirm={onconfirm} onChange={onchange}/>\r\n          <ul className=\"list__wrapper\">\r\n            {user.map( v => {\r\n            return <User key={v.id} userInfo={v} onClear={onclear} onEdit={onedit} onRemove={onremove} />;\r\n            })}\r\n          </ul>\r\n        </div>\r\n      );\r\n\r\n}\r\n\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <TodoList/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}