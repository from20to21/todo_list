{"version":3,"sources":["components/Create.js","components/User.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","value","onCreate","onChange","className","action","onSubmit","method","name","placeholder","type","User","target","contents","isChange","userInfo","onConfirm","onEdit","onRemove","onClick","e","preventDefault","classList","contains","nextSibling","style","textDecoration","id","thing","readOnly","customMedia","generateMedia","lgDesktop","mdDesktop","tablet","smTablet","mobile","Wrapper","styled","div","lessThan","TodoList","useState","user","setUser","setIsChange","setValue","setContents","setTarget","nextId","useRef","onedit","parseInt","onremove","filter","onconfirm","changeValue","map","onchangecontents","today","Date","year","getFullYear","month","getMonth","date","getDate","day","getDay","titleDay","titleDate","current","create","focus","v","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.438acf8a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Create({ value, onCreate, onChange}){\r\n    return (\r\n      <div>\r\n        <form className=\"typeArea__wrapper\" action=\"/\" onSubmit={onCreate} method=\"post\">\r\n          <input className=\"typeArea__create\" name=\"create\" placeholder=\"Type what will you do\" onChange={onChange} value={value}></input>\r\n          <button type=\"submit\" className=\"typeArea__addBtn\">ADD</button>\r\n        </form>\r\n      </div>\r\n    );\r\n};\r\n\r\n\r\nexport default React.memo(Create);\r\n","import React  from 'react';\r\n\r\n\r\nconst User = ({ target, contents, isChange, userInfo, onConfirm, onEdit, onRemove, onChange}) => {\r\n\r\n  const onclear = e =>{\r\n      e.preventDefault();\r\n      if(e.target.classList.contains('list__checkBox__checked')){ //체크되어있으면\r\n        e.target.className='list__checkBox'\r\n        e.target.nextSibling.style.textDecoration=\"none\"\r\n      }\r\n      else{//체크 안되어 있으면\r\n        e.target.className='list__checkBox__checked'\r\n        e.target.nextSibling.style.textDecoration=\"line-through\"\r\n      }\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      <button className=\"list__checkBox\" onClick={onclear}></button>\r\n      { isChange && userInfo.id === target ?\r\n      <>\r\n      <input type=\"text\" className=\"list__thing\" value={contents} onChange={onChange}></input>\r\n      <button className=\"list__edit\" onClick={onConfirm}>EDIT</button>\r\n      </>\r\n      :\r\n      <>\r\n      <input id={userInfo.id} type=\"text\" className=\"list__thing\" value={userInfo.thing} onClick={onEdit} readOnly></input>\r\n      <button className=\"list__empty\"></button>\r\n      </>\r\n      }\r\n      <button className=\"list__remove\" onClick={()=>onRemove(userInfo.id)}>DEL</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default User;\r\n\r\n","import React, {useState, useRef} from 'react';\r\nimport './TodoList.css';\r\nimport Create from './components/Create';\r\nimport User from './components/User';\r\nimport styled from \"styled-components\";\r\nimport { generateMedia } from 'styled-media-query';\r\n\r\nconst TodoList = () => {\r\n   \r\n    const [user, setUser]= useState([]);\r\n\r\n    const [isChange, setIsChange] = useState(false); \r\n    const [value, setValue] = useState('');\r\n    const [contents, setContents] = useState('');\r\n    const [target, setTarget] = useState('');\r\n    const nextId = useRef(1);\r\n  \r\n    const oncreate = e =>{\r\n        e.preventDefault();\r\n        setIsChange(false);\r\n        setUser([\r\n          ...user,\r\n          {\r\n            id: nextId.current,\r\n            thing: e.target.create.value\r\n          },\r\n        ]);\r\n        nextId.current+=1;\r\n        setValue('');\r\n        e.target.create.focus();\r\n    }\r\n\r\n    const onedit = e => {\r\n      e.preventDefault();\r\n      setTarget(parseInt(e.target.id));\r\n      setContents(e.target.value);\r\n      setIsChange(true);\r\n    }\r\n\r\n    const onremove = id => {\r\n      setUser(user.filter(user => user.id !== id));\r\n    }\r\n\r\n    const onconfirm = e => {\r\n      e.preventDefault();\r\n      const changeValue = {\r\n        id : target,\r\n        thing : contents\r\n      }\r\n      setUser(\r\n        user.map((user)=>user.id === target ? {...user, ...changeValue} : user)\r\n      );\r\n      setValue('');\r\n      setIsChange(false);\r\n    }\r\n\r\n    const onchange = e => {\r\n      setValue(e.target.value);\r\n    }; \r\n\r\n    const onchangecontents = e => {\r\n      setContents(e.target.value);\r\n    }; \r\n\r\n\r\n    let today = new Date();\r\n    let year = today.getFullYear(); // 년도\r\n    let month = today.getMonth() + 1;  // 월\r\n    let date = today.getDate();  // 날짜\r\n    let day = today.getDay();\r\n    function dateCal(){\r\n      if(month <=9){\r\n        month = \"0\"+month;\r\n      }\r\n      if(date <=9){\r\n        date = \"0\"+date;\r\n      }\r\n    }\r\n    dateCal();\r\n    let week = ['Sun','Mon','Tues','Wednes','Thurs','Fri','Satur'];\r\n    var titleDay = week[day]+\"Day\"\r\n    var titleDate = `${year}${month}${date}`;\r\n\r\n    return (\r\n        <Wrapper>\r\n          <h1 className=\"todo__title\">{titleDay}<span>{titleDate}</span></h1>\r\n          <Create \r\n          value={value} \r\n          onCreate={oncreate} \r\n          onChange={onchange}/>\r\n          <ul className=\"list__wrapper\">\r\n            {user.map( v => {\r\n            return <User \r\n            target={target}\r\n            contents={contents}\r\n            key={v.id}\r\n            isChange={isChange} \r\n            userInfo={v} \r\n            onEdit={onedit} \r\n            onConfirm={onconfirm}\r\n            onRemove={onremove}\r\n            onChange={onchangecontents}\r\n            />;\r\n            })}\r\n          </ul>\r\n        </Wrapper>\r\n      );\r\n}\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: '1350px',\r\n  mdDesktop: '1150px',\r\n  tablet: '960px',\r\n  smTablet: '740px',\r\n  mobile:'600px'\r\n});\r\n\r\nconst Wrapper = styled.div`\r\n  background: linear-gradient(-180deg, rgb(17, 111, 197), rgb(67, 32, 137));\r\n  background: -webkit-linear-gradient(-90deg, rgb(17, 111, 197), rgb(67, 32, 137));\r\n  background: -ms-linear-gradient(-180deg, rgb(17, 111, 197), rgb(67, 32, 137));\r\n  background: -moz-linear-gradient(-180deg, rgb(17, 111, 197), rgb(67, 32, 137));\r\n  border-radius: 10px;\r\n  box-shadow: 0 10px 15px 0 rgba(0, 0, 0, 0.1), 0 5px 10px 0 rgba(0, 0, 0, 0.1);\r\n  width: 35%;\r\n  padding: 10px 10px;\r\n  min-height: 600px;\r\n  ${customMedia.lessThan('tablet')`\r\n   width: 50%;\r\n  `}\r\n  ${customMedia.lessThan('mobile')`\r\n   width: 90%;\r\n  `}\r\n`;\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <TodoList/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}