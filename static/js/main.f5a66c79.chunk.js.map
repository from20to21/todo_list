{"version":3,"sources":["components/Create.js","components/User.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","value","onCreate","onChange","className","action","onSubmit","method","name","placeholder","type","User","target","contents","isChange","userInfo","onConfirm","onEdit","onRemove","id","for","onClick","thing","readOnly","customMedia","generateMedia","lgDesktop","mdDesktop","tablet","smTablet","mobile","Wrapper","styled","div","lessThan","TodoList","useState","user","setUser","setIsChange","setValue","setContents","setTarget","nextId","useRef","onedit","e","preventDefault","parseInt","onremove","filter","onconfirm","changeValue","map","onchangecontents","today","Date","year","getFullYear","month","getMonth","date","getDate","day","getDay","titleDay","titleDate","current","create","focus","v","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QA0BeA,UAAMC,MAxBrB,YAAgD,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACjC,OACE,6BACE,0BACEC,UAAU,oBACVC,OAAO,IACPC,SAAUJ,EACVK,OAAO,QAEP,2BACEH,UAAU,mBACVI,KAAK,SACLC,YAAY,wBACZN,SAAUA,EACVF,MAAOA,IAET,4BAAQS,KAAK,SAASN,UAAU,oBAAhC,YC2DOO,EA3EF,SAAC,GASP,IARLC,EAQI,EARJA,OACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,SACAC,EAKI,EALJA,SACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,SACAf,EACI,EADJA,SAEA,OACE,4BACGW,GAAYC,EAASI,KAAOP,EAC3B,0BACER,UAAU,oBACVC,OAAO,IACPC,SAAUU,EACVT,OAAO,QAEP,2BACEY,GAAIJ,EAASI,GACbT,KAAK,WACLN,UAAU,mBAEZ,2BAAOgB,IAAKL,EAASI,KACrB,2BACET,KAAK,OACLN,UAAU,cACVH,MAAOY,EACPV,SAAUA,IAEZ,4BAAQC,UAAU,aAAaiB,QAASL,GAAxC,QAGA,4BACEZ,UAAU,eACViB,QAAS,kBAAMH,EAASH,EAASI,MAFnC,QAQF,0BACEf,UAAU,oBACVC,OAAO,IACPC,SAAUU,EACVT,OAAO,QAEP,2BACEY,GAAIJ,EAASI,GACbT,KAAK,WACLN,UAAU,mBAEZ,2BAAOgB,IAAKL,EAASI,KACrB,2BACEX,KAAMO,EAASI,GACfT,KAAK,OACLN,UAAU,cACVH,MAAOc,EAASO,MAChBD,QAASJ,EACTM,UAAQ,IAEV,4BAAQnB,UAAU,gBAClB,4BACEA,UAAU,eACViB,QAAS,kBAAMH,EAASH,EAASI,MAFnC,U,4yBC1DV,IAwHMK,EAAcC,YAAc,CAChCC,UAAW,SACXC,UAAW,SACXC,OAAQ,QACRC,SAAU,QACVC,OAAQ,UAGJC,EAAUC,IAAOC,IAAV,IAkBTT,EAAYU,SAAS,SAArBV,CAlBS,KAqBTA,EAAYU,SAAS,SAArBV,CArBS,MA0BEW,EA1JE,WAAO,IAAD,EACGC,mBAAS,CAC/B,CACEjB,GAAI,EACJG,MAAO,qDAET,CACEH,GAAI,EACJG,MAAO,iEAET,CACEH,GAAI,EACJG,MAAO,8BAET,CACEH,GAAI,EACJG,MAAO,2CAhBU,mBACde,EADc,KACRC,EADQ,OAmBWF,oBAAS,GAnBpB,mBAmBdtB,EAnBc,KAmBJyB,EAnBI,OAoBKH,mBAAS,IApBd,mBAoBdnC,EApBc,KAoBPuC,EApBO,OAqBWJ,mBAAS,IArBpB,mBAqBdvB,EArBc,KAqBJ4B,EArBI,OAsBOL,mBAAS,IAtBhB,mBAsBdxB,EAtBc,KAsBN8B,EAtBM,KAuBfC,EAASC,iBAAO,GAiBhBC,EAAS,SAACC,GACdA,EAAEC,iBACFL,EAAUM,SAASF,EAAElC,OAAOJ,OAC5BiC,EAAYK,EAAElC,OAAOX,OACrBsC,GAAY,IAGRU,EAAW,SAAC9B,GAChBmB,EAAQD,EAAKa,QAAO,SAACb,GAAD,OAAUA,EAAKlB,KAAOA,OAGtCgC,EAAY,SAACL,GACjBA,EAAEC,iBACF,IAAMK,EAAc,CAClBjC,GAAIP,EACJU,MAAOT,GAETyB,EACED,EAAKgB,KAAI,SAAChB,GAAD,OACPA,EAAKlB,KAAOP,EAAZ,2BAA0ByB,GAASe,GAAgBf,MAGvDG,EAAS,IACTD,GAAY,IAORe,EAAmB,SAACR,GACxBL,EAAYK,EAAElC,OAAOX,QAGnBsD,EAAQ,IAAIC,KACZC,EAAOF,EAAMG,cACbC,EAAQJ,EAAMK,WAAa,EAC3BC,EAAON,EAAMO,UACbC,EAAMR,EAAMS,SAEVL,GAAS,IACXA,EAAQ,IAAMA,GAEZE,GAAQ,IACVA,EAAO,IAAMA,GAIjB,IACII,EADO,CAAC,MAAO,MAAO,OAAQ,SAAU,QAAS,MAAO,SACxCF,GAAO,MACvBG,EAAS,UAAMT,GAAN,OAAaE,GAAb,OAAqBE,GAElC,OACE,kBAAC9B,EAAD,KACE,wBAAI3B,UAAU,eACX6D,EACD,8BAAOC,IAET,kBAAC,EAAD,CAAQjE,MAAOA,EAAOC,SAzET,SAAC4C,GAChBA,EAAEC,iBACFR,GAAY,GACZD,EAAQ,GAAD,mBACFD,GADE,CAEL,CACElB,GAAIwB,EAAOwB,QACX7C,MAAOwB,EAAElC,OAAOwD,OAAOnE,UAG3B0C,EAAOwB,SAAW,EAClB3B,EAAS,IACTM,EAAElC,OAAOwD,OAAOC,SA6D4BlE,SAhC7B,SAAC2C,GAChBN,EAASM,EAAElC,OAAOX,UAgChB,wBAAIG,UAAU,iBACXiC,EAAKgB,KAAI,SAACiB,GACT,OACE,kBAAC,EAAD,CACE1D,OAAQA,EACRC,SAAUA,EACV0D,IAAKD,EAAEnD,GACPL,SAAUA,EACVC,SAAUuD,EACVrD,OAAQ4B,EACR7B,UAAWmC,EACXjC,SAAU+B,EACV9C,SAAUmD,UC/GTkB,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5a66c79.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Create({ value, onCreate, onChange }) {\r\n  return (\r\n    <div>\r\n      <form\r\n        className=\"typeArea__wrapper\"\r\n        action=\"/\"\r\n        onSubmit={onCreate}\r\n        method=\"post\"\r\n      >\r\n        <input\r\n          className=\"typeArea__create\"\r\n          name=\"create\"\r\n          placeholder=\"Type what will you do\"\r\n          onChange={onChange}\r\n          value={value}\r\n        ></input>\r\n        <button type=\"submit\" className=\"typeArea__addBtn\">\r\n          ADD\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Create);\r\n","import React from 'react';\r\n\r\nconst User = ({\r\n  target,\r\n  contents,\r\n  isChange,\r\n  userInfo,\r\n  onConfirm,\r\n  onEdit,\r\n  onRemove,\r\n  onChange,\r\n}) => {\r\n  return (\r\n    <li>\r\n      {isChange && userInfo.id === target ? (\r\n        <form\r\n          className=\"list__editwrapper\"\r\n          action=\"/\"\r\n          onSubmit={onConfirm}\r\n          method=\"post\"\r\n        >\r\n          <input\r\n            id={userInfo.id}\r\n            type=\"checkbox\"\r\n            className=\"list__checkBox\"\r\n          ></input>\r\n          <label for={userInfo.id}></label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"list__thing\"\r\n            value={contents}\r\n            onChange={onChange}\r\n          ></input>\r\n          <button className=\"list__edit\" onClick={onConfirm}>\r\n            EDIT\r\n          </button>\r\n          <button\r\n            className=\"list__remove\"\r\n            onClick={() => onRemove(userInfo.id)}\r\n          >\r\n            DEL\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <form\r\n          className=\"list__editwrapper\"\r\n          action=\"/\"\r\n          onSubmit={onConfirm}\r\n          method=\"post\"\r\n        >\r\n          <input\r\n            id={userInfo.id}\r\n            type=\"checkbox\"\r\n            className=\"list__checkBox\"\r\n          ></input>\r\n          <label for={userInfo.id}></label>\r\n          <input\r\n            name={userInfo.id}\r\n            type=\"text\"\r\n            className=\"list__thing\"\r\n            value={userInfo.thing}\r\n            onClick={onEdit}\r\n            readOnly\r\n          ></input>\r\n          <button className=\"list__empty\"></button>\r\n          <button\r\n            className=\"list__remove\"\r\n            onClick={() => onRemove(userInfo.id)}\r\n          >\r\n            DEL\r\n          </button>\r\n        </form>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React, { useState, useRef } from 'react';\r\nimport './TodoList.css';\r\nimport Create from './components/Create';\r\nimport User from './components/User';\r\nimport styled from 'styled-components';\r\nimport { generateMedia } from 'styled-media-query';\r\n\r\nconst TodoList = () => {\r\n  const [user, setUser] = useState([\r\n    {\r\n      id: 1,\r\n      thing: '프로젝트 생성하기',\r\n    },\r\n    {\r\n      id: 2,\r\n      thing: '컴포넌트 스타일링하기',\r\n    },\r\n    {\r\n      id: 3,\r\n      thing: 'Context 만들기',\r\n    },\r\n    {\r\n      id: 4,\r\n      thing: '기능 구현하기',\r\n    },\r\n  ]);\r\n  const [isChange, setIsChange] = useState(false);\r\n  const [value, setValue] = useState('');\r\n  const [contents, setContents] = useState('');\r\n  const [target, setTarget] = useState('');\r\n  const nextId = useRef(2);\r\n\r\n  const oncreate = (e) => {\r\n    e.preventDefault();\r\n    setIsChange(false);\r\n    setUser([\r\n      ...user,\r\n      {\r\n        id: nextId.current,\r\n        thing: e.target.create.value,\r\n      },\r\n    ]);\r\n    nextId.current += 1;\r\n    setValue('');\r\n    e.target.create.focus();\r\n  };\r\n\r\n  const onedit = (e) => {\r\n    e.preventDefault();\r\n    setTarget(parseInt(e.target.name));\r\n    setContents(e.target.value);\r\n    setIsChange(true);\r\n  };\r\n\r\n  const onremove = (id) => {\r\n    setUser(user.filter((user) => user.id !== id));\r\n  };\r\n\r\n  const onconfirm = (e) => {\r\n    e.preventDefault();\r\n    const changeValue = {\r\n      id: target,\r\n      thing: contents,\r\n    };\r\n    setUser(\r\n      user.map((user) =>\r\n        user.id === target ? { ...user, ...changeValue } : user,\r\n      ),\r\n    );\r\n    setValue('');\r\n    setIsChange(false);\r\n  };\r\n\r\n  const onchange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const onchangecontents = (e) => {\r\n    setContents(e.target.value);\r\n  };\r\n\r\n  let today = new Date();\r\n  let year = today.getFullYear(); // 년도\r\n  let month = today.getMonth() + 1; // 월\r\n  let date = today.getDate(); // 날짜\r\n  let day = today.getDay();\r\n  function dateCal() {\r\n    if (month <= 9) {\r\n      month = '0' + month;\r\n    }\r\n    if (date <= 9) {\r\n      date = '0' + date;\r\n    }\r\n  }\r\n  dateCal();\r\n  let week = ['Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur'];\r\n  var titleDay = week[day] + 'Day';\r\n  var titleDate = `${year}${month}${date}`;\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h1 className=\"todo__title\">\r\n        {titleDay}\r\n        <span>{titleDate}</span>\r\n      </h1>\r\n      <Create value={value} onCreate={oncreate} onChange={onchange} />\r\n      <ul className=\"list__wrapper\">\r\n        {user.map((v) => {\r\n          return (\r\n            <User\r\n              target={target}\r\n              contents={contents}\r\n              key={v.id}\r\n              isChange={isChange}\r\n              userInfo={v}\r\n              onEdit={onedit}\r\n              onConfirm={onconfirm}\r\n              onRemove={onremove}\r\n              onChange={onchangecontents}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: '1350px',\r\n  mdDesktop: '1150px',\r\n  tablet: '960px',\r\n  smTablet: '740px',\r\n  mobile: '600px',\r\n});\r\n\r\nconst Wrapper = styled.div`\r\n  background: linear-gradient(-180deg, rgb(17, 111, 197), rgb(67, 32, 137));\r\n  background: -webkit-linear-gradient(\r\n    -90deg,\r\n    rgb(17, 111, 197),\r\n    rgb(67, 32, 137)\r\n  );\r\n  background: -ms-linear-gradient(-180deg, rgb(17, 111, 197), rgb(67, 32, 137));\r\n  background: -moz-linear-gradient(\r\n    -180deg,\r\n    rgb(17, 111, 197),\r\n    rgb(67, 32, 137)\r\n  );\r\n  border-radius: 10px;\r\n  box-shadow: 0 10px 15px 0 rgba(0, 0, 0, 0.1), 0 5px 10px 0 rgba(0, 0, 0, 0.1);\r\n  width: 35%;\r\n  padding: 10px 10px;\r\n  min-height: 600px;\r\n  ${customMedia.lessThan('tablet')`\r\n   width: 50%;\r\n  `}\r\n  ${customMedia.lessThan('mobile')`\r\n   width: 90%;\r\n  `}\r\n`;\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return <TodoList />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}